const getManagers = catchAsync(async (req, res) => {
  try {
    const perPage = 10;
    const page = req.query.page ? parseInt(req.query.page, 10) : 1;
    const totalCount = await User.countDocuments();

    const sortField = req.query.sortField || "location";
    const sortOrder = req.query.sortOrder;
    const sortOptions = { [sortField]: sortOrder };
    const user = await User.find({ role: "Manager" })
      .sort(sortOptions)
      .skip(perPage * (page - 1))
      .limit(perPage);
    return res.status(200).json({
      status: "200",
      message: `Manager list fetched successfully.`,
      data: user,
      count: totalCount,
      page: page,
      totalPages: Math.ceil(totalCount / perPage),
    });
  } catch (error) {
    return res.status(500).json({
      status: "500",
      message: "An error occurred while fetching manager list.",
      error: error.message,
    });
  }
});










router.get("/managerList", managerController.getManagers);





    const apiUrl = `http://localhost:4000/v1/manager/managerList?page=${page}&sortField=${sortField}&sortOrder=${sortOrder}`;











=========================


import { useQuery } from 'react-query';

import { axiosMain } from '@/lib/axios';
import { ExtractFnReturnType, QueryConfig } from '@/lib/react-query';
import { Bonus } from '@/types';

export const getAllBonus = (name?: string, page?: number): Promise<Bonus> => {
  if (!name) {
    return axiosMain.get(`/admin/bonuses?page=${page}`);
  }

  const urlBuilder = new URLSearchParams();
  if (name) {
    urlBuilder.set('name', name);
  }

  return axiosMain.get(`/admin/bonuses?${urlBuilder.toString()}`);
};

type QueryFnType = typeof getAllBonus;

type UseOptions = {
  config?: QueryConfig<QueryFnType>;
  name?: string;
  page?: number;
};

export const useAllBonus = ({ config, name, page }: UseOptions = {}) => {
  return useQuery<ExtractFnReturnType<QueryFnType>>({
    ...config,
    queryKey: ['bonuses'],
    queryFn: () => getAllBonus(name, page),
  });
};
